[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim', 'neoyank.vim']
hook_add = '''
    nmap [search]: :<C-u>Denite -start-filter 
    nmap <silent>[search]f :<C-u>Denite -start-filter file/rec<CR>
    nmap <silent>[search]s :<C-u>Denite -start-filter file/rec/git<CR>
    nmap <silent>[search]c :<C-u>Denite file<CR>
    nmap <silent>[search]d :<C-u>DeniteBufferDir file<CR>
    nmap <silent>[search]<Space> :<C-u>Denite -start-filter file_mru<CR>
    nmap <silent>[search]b :<C-u>Denite -start-filter buffer<CR>
    nmap <silent>[search]g :<C-u>Denite -start-filter -auto-action=preview -no-empty grep<CR>
    nmap <silent>[search]/ :<C-u>Denite -start-filter line<CR>
    nmap <silent>[search]h :<C-u>Denite -start-filter help<CR>
    nmap <silent>[search]p :<C-u>Denite -start-filter neoyank<CR>

    autocmd MyAutoCmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
                    \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> s
                    \ denite#do_map('do_action', 'split')
        nnoremap <silent><buffer><expr> v
                    \ denite#do_map('do_action','vsplit')
        nnoremap <silent><buffer><expr> d
                    \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
                    \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> u
                    \ denite#do_map('move_up_path')
        nnoremap <silent><buffer><expr> c
                    \ denite#do_map('do_action', 'cd')
        nnoremap <silent><buffer><expr> q
                    \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> <ESC>
                    \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
                    \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <SPACE>
                    \ denite#do_map('toggle_select').'j'
    endfunction

    autocmd MyAutoCmd FileType denite-filter call s:denite_filter_my_settings()
    function! s:denite_filter_my_settings() abort
        imap <silent><buffer> <C-o> <plug>(denite_filter_quit)
        imap <silent><buffer> <ESC> <plug>(denite_filter_quit)
        nmap <silent><buffer> <ESC> <plug>(denite_filter_quit)

    endfunction
'''
hook_post_source = '''

    let s:ignore_globs = ['.git/', '.ropeproject/', '__pycache__/', 'node_modules',
                \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/', 'build/', '*.class']

    " Change file/rec and grep command to use ag.
    if executable('ag')
        let s:ag_ignore_options = map(deepcopy(s:ignore_globs), { k, v -> '--ignore=' . v })
        call denite#custom#var('file/rec', 'command',
                    \ ['ag', '--follow', '--nocolor'] + s:ag_ignore_options + ['--nogroup', '-g', ''])

        call denite#custom#var('grep', 'command', ['ag'])
        call denite#custom#var('grep', 'default_opts',
                    \ ['-i', '--vimgrep'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    endif

    " Use floating window if exists
    if exists('*nvim_open_float_win')
        call denite#custom#option('default', {'split': 'floating'})
    endif

    " Define alias
    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
                \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#alias('source', 'file/rec/py', 'file/rec')
    call denite#custom#var('file/rec/py', 'command', ['scantree.py'])

    " Change ignore_globs
    call denite#custom#filter('matcher/ignore_globs', 'ignore_globs', s:ignore_globs)


    "call denite#custom#source('file/rec', 'matchers',
    "    \ ['matcher_fuzzy', 'matcher_project_files', 'matcher_ignore_globs'])
    "call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',

    " Patch for lightline
    if exists("g:lightline")
        function! DeniteMode()
            return &ft != 'denite' ? lightline#mode() : 'DENITE'
        endfunction
        function! DeniteReadOnly()
            return &ft != 'denite' && &readonly ? 'RO' : ''
        endfunction
        function! DeniteModified()
            return &ft != 'denite' && ! &modifiable ? '-' :
                \ &ft != 'denite' && &modified ? '+' : ''
        endfunction
        function! DeniteFilename()
            return &ft != 'denite' ? expand('%:t') :
                \ denite#get_status('sources')
        endfunction
        function! DeniteFugitive()
            return &ft != 'denite' ? '' :
                \ denite#get_status('path') . ' ' . denite#get_status('input')
        endfunction
        let g:lightline.component_function = {
            \ 'mode': 'DeniteMode',
            \ 'readonly': 'DeniteReadOnly',
            \ 'filename': 'DeniteFilename',
            \ 'modified': 'DeniteModified',
            \ 'fugitive': 'DeniteFugitive',
        \ }
        call denite#custom#option('default', 'statusline', v:false)
        call lightline#init()
    endif
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
    inoremap <expr> <TAB> pumvisible() ? "\<DOWN>": "\<TAB>"
    inoremap <expr> <S-TAB> pumvisible() ? "\<UP>": "\<S-TAB>"
'''
hook_source = '''
    " call deoplete#enable_logging('DEBUG', 'deoplete.log')
    call deoplete#custom#option({
        \ 'auto_complete_delay': 0,
        \ 'auto_complete_start_length': 1,
        \ 'sources': {
            \ '_': [],
        \ },
    \ })
    call deoplete#custom#source('_', 'matchers', ['matcher_head', 'matcher_length'])
    call deoplete#custom#source('buffer', 'mark', '[*]')

    " call deoplete#custom#source('jedi', 'is_debug_enabled', 1)
    " let g:deoplete#sources#jedi#show_docstring = 1
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
    " let g:jedi#auto_initialization = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#completions_enabled = 0
    let g:jedi#show_call_signatures_delay = 20

    "let g:jedi#goto_command = "<Leader>d"
    "let g:jedi#goto_assignments_command = "<Leader>g"
    "let g:jedi#documentation_command = "K"
    "let g:jedi#rename_command = "<Leader>r"
    "let g:jedi#usages_command = "<Leader>n"

    "nnoremap <Leader>d :<C-u>call jedi#goto()<CR>
    "nnoremap <Leader>g :<C-u>call jedi#goto_assignments()<CR>
    "nnoremap K         :<C-u>call jedi#show_documentation()<CR>
    "nnoremap <Leader>r :<C-u>call jedi#rename()<CR>
    "nnoremap <Leader>n :<C-u>call jedi#usages()<CR>
'''
hook_source = '''
    call jedi#configure_call_signatures()
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
# hook_post_source = '''
#     call deoplete#custom#source('jedi', 'is_debug_enabled', 1)
# '''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'zchee/deoplete-zsh'
on_ft = 'zsh'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# TODO: support js/ts
[[plugins]]
repo = 'w0rp/ale'
on_ft = 'python'
build = 'pip3 install flake8'
hook_add = '''
    let g:ale_sign_error = "\u274c"
    let g:ale_sign_warning = "\u26A0"
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_sign_column_always = 1
    " let g:ale_change_sign_column_color = 1

    " let g:ale_lint_on_enter = 1
    " let g:ale_lint_on_save = 1
    " let g:ale_lint_on_text_changed = 'always'

    " let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 0
    " let g:ale_open_list = 0
    " let g:ale_keep_list_window_open = 0

    let g:ale_linters = {
        \ 'python': ['flake8', 'mypy'],
    \ }
    let g:ale_fixers = {
    \ 'python': ['autopep8', 'isort'],
    \ }

    let g:ale_python_flake8_executable = g:python3_host_prog
    let g:ale_python_flake8_options = '-m flake8'
    let g:ale_python_mypy_executable = g:python3_host_prog
    let g:ale_python_mypy_options = '-m mypy'
    let g:ale_python_autopep8_executable = g:python3_host_prog
    let g:ale_python_autopep8_options = '-m autopep8 --aggressive --aggressive --aggressive --aggressive'
    let g:ale_python_black_executable = g:python3_host_prog
    let g:ale_python_black_options = '-m black'
    let g:ale_python_isort_executable = g:python3_host_prog
    let g:ale_python_isort_options = '-m isort'

    nmap <silent> <Leader>k <Plug>(ale_previous)
    nmap <silent> <Leader>j <Plug>(ale_next)
    nmap <silent> <Leader>f <Plug>(ale_fix)

    let g:ale_fix_on_save = 1
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = 'lightline.vim'
on_ft = 'python'
hook_add = '''
    let g:lightline.component_expand = {
        \ 'linter_checking': 'lightline#ale#checking',
        \ 'linter_warnings': 'lightline#ale#warnings',
        \ 'linter_errors': 'lightline#ale#errors',
        \ 'linter_ok': 'lightline#ale#ok',
    \ }
    let g:lightline.component_type = {
        \ 'linter_checking': 'left',
        \ 'linter_warnings': 'warning',
        \ 'linter_errors': 'error',
        \ 'linter_ok': 'left',
    \ }
    let g:lightline#ale#indicator_checking = "Linting... \u231B "
    let g:lightline#ale#indicator_warnings = "\u26A0 "
    let g:lightline#ale#indicator_errors = "\u274c"
    let g:lightline#ale#indicator_ok = "\u2714 "
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

# TODO: support ts
[[plugins]]
repo = 'thinca/vim-quickrun'
on_ft = ['python', 'javascript']
hook_add = '''
    let g:quickrun_config = {
        \ '_': {
            \ 'runner': 'vimproc',
            \ 'runner/vimproc/updatetime': 40,
            \ 'outputter': 'error',
            \ 'outputter/error/success': 'quickfix',
            \ 'outputter/error/error': 'quickfix',
            \ 'outputter/buffer/split': ':botright 8sp',
            \ 'outputter/buffer/close_on_empty': 1,
        \ },
    \ }
    let g:quickrun_no_default_key_mappings = 1
    nmap <Leader>e :<C-u>cclose<CR>:write<CR>:QuickRun -mode n<CR>
'''

# TODO: support ts
[[plugins]]
repo = 'Shougo/vimproc.vim'
on_ft = ['python', 'javascript']
hook_add = '''
    if g:is_windows
        let g:vimproc#download_windows_dll = 1
    endif
'''
hook_post_update = '''
    if !g:is_windows
        let g:dein#plugin.build = 'make'
    endif
'''

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
build = 'npm install -g tern'
on_ft = 'javascript'

[[plugins]]
repo = 'othree/yajs.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = 'typescript'

[[plugins]]
repo = 'mhartington/nvim-typescript'
#build = './install.sh'
build = 'npm install -g typescript && cd rplugin/node/nvim_typescript && npm install && npm run build'
on_ft = 'typescript'
hook_add = '''
    " Change signText because original one breaks layout in neovim-qt
    let g:nvim_typescript#default_signs = [
      \  {
      \  'TSerror': {
      \   'texthl': 'SpellBad',
      \   'signText': '>>',
      \   'signTexthl': ''
      \  }
      \},
      \{
      \  'TSwarning': {
      \   'texthl': 'SpellBad',
      \   'signText': '>>',
      \   'signTexthl': 'NeomakeWarningSign'
      \  }
      \},
      \{
      \  'TSinformation': {
      \   'texthl': 'SpellBad',
      \   'signText': '>>',
      \   'signTexthl': 'NeomakeInfoSign'
      \   }
      \},
      \{
      \  'TShint': {
      \   'texthl': 'SpellBad',
      \   'signText': '?',
      \   'signTexthl': 'NeomakeInfoSign'
      \   }
      \}]
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'markdown']
hook_add = '''
    let g:user_emmet_leader_key=','
    let g:user_emmet_settings = {
                \ 'variables': { 'lang': "ja" }
                \ }
'''
